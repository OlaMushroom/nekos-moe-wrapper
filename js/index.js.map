{
  "version": 3,
  "sources": ["..\\src\\main.ts", "..\\src\\index.ts"],
  "sourcesContent": [
    "import type { PostSearch, UserSearch, UploadForm } from './types.ts';\r\n\r\ninterface PostData {\r\n  id: string;\r\n  approver?: {\r\n    id: string;\r\n    username: string;\r\n  };\r\n  artist?: string;\r\n  comments?: [];\r\n  createdAt: string;\r\n  favorites?: number;\r\n  likes?: number;\r\n  pending?: boolean;\r\n  nsfw: string;\r\n  tags: string[];\r\n  uploader: {\r\n    id: string;\r\n    username: string;\r\n  };\r\n}\r\n\r\ninterface UserData {\r\n  id: string;\r\n  createdAt: string;\r\n  email: string;\r\n  favorites?: string[];\r\n  favoritesReceived: number;\r\n  likes?: string[];\r\n  likesReceived: number;\r\n  roles: string[];\r\n  savedTags?: string[];\r\n  uploads: number;\r\n  username: string;\r\n  verified?: boolean;\r\n}\r\n\r\ninterface UploadData {\r\n  image: PostData;\r\n  image_url: string;\r\n  post_url: string;\r\n}\r\n\r\nasync function errorHandler(res: Response) {\r\n  let msg = '';\r\n  if (res.headers.get('content-type')?.includes('application/json')) {\r\n    const data = await res.json();\r\n    msg = `${data.message}${'id' in data ? `\\nID: ${data.id}` : ''}`;\r\n  }\r\n  throw Error(`HTTP Error: ${res.status} ${res.statusText}\\n`, { cause: msg });\r\n}\r\n\r\nasync function sendRequest(endpoint: string, options: object = {}) {\r\n  const url = new URL(endpoint, 'https://nekos.moe/api/v1/');\r\n  console.log(`URL: ${url.toString()}\\nTimestamp: ${Date.now()}`);\r\n  try {\r\n    const res = await fetch(url, options);\r\n    if (!res.ok) await errorHandler(res);\r\n    return await res.json();\r\n  } catch (e) {\r\n    throw Error('Error: ', { cause: e });\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a new image using `File` object.\r\n * @remarks File name is without file extension.\r\n */\r\nexport function create(\r\n  file: BlobPart,\r\n  name: string,\r\n  type: 'jpeg' | 'png'\r\n): File {\r\n  try {\r\n    const image = new File([file], `${name}.${type}`, {\r\n      type: `image/${type}`\r\n    });\r\n    console.log('File created successfully:\\n%o', {\r\n      name: image.name,\r\n      type: image.type,\r\n      size: image.size,\r\n      lastModified: image.lastModified\r\n    });\r\n    return image;\r\n  } catch (e) {\r\n    throw Error('Error: ', { cause: e });\r\n  }\r\n}\r\n\r\n// Post/Image\r\n/** Get a `Post` using ID. */\r\nexport async function getPost(id: string): Promise<PostData> {\r\n  return (await sendRequest(`images/${id}`)).image;\r\n}\r\n\r\n/** Search for `Post`(s). */\r\nexport async function searchPost(\r\n  options: PostSearch = {}\r\n): Promise<PostData[]> {\r\n  return (\r\n    await sendRequest('images/search', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(options)\r\n    })\r\n  ).images;\r\n}\r\n\r\n/** Get random `Post`(s). */\r\nexport async function random(count = 1, nsfw?: boolean): Promise<PostData[]> {\r\n  const params = new URLSearchParams({ count: count.toString() });\r\n  if (nsfw !== undefined) params.append('nsfw', nsfw.toString());\r\n  return (\r\n    await sendRequest(\r\n      `random/image?count=${count}${nsfw !== undefined ? `&nsfw=${nsfw}` : ''}`\r\n    )\r\n  ).images;\r\n}\r\n\r\n/**\r\n * Upload an image as pending `Post`.\r\n * @remarks This function uses the `FormData` object and set `'Content-Type': 'multipart/form-data'` to send the data.\r\n */\r\nexport async function upload(form: UploadForm): Promise<UploadData> {\r\n  const formData = new FormData();\r\n  formData.append('image', form.image);\r\n  formData.append('nsfw', form.nsfw.toString());\r\n  formData.append('tags', form.tags.toString());\r\n  if (form.artist !== undefined) formData.append('artist', form.artist);\r\n  return await sendRequest('images', {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: form.token,\r\n      'Content-Type': 'multipart/form-data'\r\n    },\r\n    body: formData\r\n  });\r\n}\r\n\r\n// User\r\n/**\r\n * Get a `User` using ID.\r\n * @remarks If `id == '@me'` and a valid token is provided, the user's data will be returned.\r\n */\r\nexport async function getUser(id: string, token?: string): Promise<UserData> {\r\n  const headers = new Headers();\r\n  if (token !== undefined) headers.append('Authorization', token);\r\n  return (await sendRequest(`user/${id}`, { headers })).user;\r\n}\r\n\r\n/** Search for `User`(s). */\r\nexport async function searchUser(\r\n  options: UserSearch = {}\r\n): Promise<UserData[]> {\r\n  return (\r\n    await sendRequest('users/search', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(options)\r\n    })\r\n  ).users;\r\n}\r\n\r\n// Auth\r\n/** Get token. */\r\nexport async function auth(\r\n  username: string,\r\n  password: string\r\n): Promise<string> {\r\n  return (\r\n    await sendRequest('auth', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password })\r\n    })\r\n  ).token;\r\n}\r\n\r\n/**\r\n * Regenerate token.\r\n * @remarks The new token will not be returned.\r\n */\r\nexport async function regen(token: string): Promise<void> {\r\n  await sendRequest('auth', {\r\n    method: 'POST',\r\n    headers: { Authorization: token }\r\n  });\r\n}\r\n",
    "/**\r\n * @module\r\n * @example\r\n * ```ts\r\n * import * as nekos from '@om/nekos-moe';\r\n * console.log(nekos._links);\r\n * ```\r\n */\r\nexport * from './main.ts';\r\n\r\n/** URLs. */\r\nexport const _links = {\r\n  website: {\r\n    url: 'https://nekos.moe',\r\n    repo: 'https://github.com/Nekos-moe/website'\r\n  },\r\n  api: {\r\n    url: 'https://nekos.moe/api/v1',\r\n    repo: 'https://github.com/Nekos-moe/api',\r\n    docs: {\r\n      url: 'https://docs.nekos.moe',\r\n      repo: 'https://github.com/Nekos-moe/docs'\r\n    }\r\n  },\r\n  wrapper: {\r\n    url: 'https://jsr.io/@om/nekos-moe',\r\n    repo: 'https://github.com/OlaMushroom/nekos-moe-wrapper',\r\n    docs: {\r\n      url: 'https://nekos-moe-wrapper.vercel.app',\r\n      repo: 'https://github.com/OlaMushroom/nekos-moe-wrapper/tree/docs'\r\n    }\r\n  }\r\n};\r\n"
  ],
  "mappings": "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",
  "debugId": "79206CF93825F31464756E2164756E21",
  "names": []
}