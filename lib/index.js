async function B(j){let v="";if(j.headers.get("content-type")?.includes("application/json")){const x=await j.json();v=`${x.message}${"id"in x?`\nID: ${x.id}`:""}`}throw Error(`HTTP Error: ${j.status} ${j.statusText}\n`,{cause:v})}async function A(j,v={}){const x=new URL(j,"https://nekos.moe/api/v1/");console.log(`URL: ${x.toString()}\nTimestamp: ${Date.now()}`);try{const z=await fetch(x,v);if(!z.ok)await B(z);return await z.json()}catch(z){throw Error("Error: ",{cause:z})}}function C(j,v,x){try{const z=new File([j],`${v}.${x}`,{type:`image/${x}`});return console.log("File created successfully:\n%o",{name:z.name,type:z.type,size:z.size,lastModified:z.lastModified}),z}catch(z){throw Error("Error: ",{cause:z})}}async function E(j){return(await A(`images/${j}`)).image}async function F(j={}){return(await A("images/search",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(j)})).images}async function G(j=1,v){const x=new URLSearchParams({count:j.toString()});if(v!==void 0)x.append("nsfw",v.toString());return(await A(`random/image?count=${j}${v!==void 0?`&nsfw=${v}`:""}`)).images}async function I(j){const v=new FormData;if(v.append("image",j.image),v.append("nsfw",j.nsfw.toString()),v.append("tags",j.tags.toString()),j.artist!==void 0)v.append("artist",j.artist);return await A("images",{method:"POST",headers:{Authorization:j.token,"Content-Type":"multipart/form-data"},body:v})}async function J(j,v){const x=new Headers;if(v!==void 0)x.append("Authorization",v);return(await A(`user/${j}`,{headers:x})).user}async function K(j={}){return(await A("users/search",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(j)})).users}async function L(j,v){return(await A("auth",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:j,password:v})})).token}async function M(j){await A("auth",{method:"POST",headers:{Authorization:j}})}export{I as upload,K as searchUser,F as searchPost,M as regen,G as random,J as getUser,E as getPost,C as create,L as auth};
